{"version":3,"file":"growdesk-widget.umd.js","sources":["../node_modules/@vue/devtools-api/lib/esm/env.js","../node_modules/@vue/devtools-api/lib/esm/const.js","../node_modules/@vue/devtools-api/lib/esm/time.js","../node_modules/@vue/devtools-api/lib/esm/proxy.js","../node_modules/@vue/devtools-api/lib/esm/index.js","../node_modules/pinia/dist/pinia.mjs","../src/components/ChatWidget.vue","../src/api/widgetApi.ts","../src/main.ts"],"sourcesContent":["export function getDevtoolsGlobalHook() {\n    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;\n}\nexport function getTarget() {\n    // @ts-expect-error navigator and windows are not available in all environments\n    return (typeof navigator !== 'undefined' && typeof window !== 'undefined')\n        ? window\n        : typeof globalThis !== 'undefined'\n            ? globalThis\n            : {};\n}\nexport const isProxyAvailable = typeof Proxy === 'function';\n","export const HOOK_SETUP = 'devtools-plugin:setup';\nexport const HOOK_PLUGIN_SETTINGS_SET = 'plugin:settings:set';\n","let supported;\nlet perf;\nexport function isPerformanceSupported() {\n    var _a;\n    if (supported !== undefined) {\n        return supported;\n    }\n    if (typeof window !== 'undefined' && window.performance) {\n        supported = true;\n        perf = window.performance;\n    }\n    else if (typeof globalThis !== 'undefined' && ((_a = globalThis.perf_hooks) === null || _a === void 0 ? void 0 : _a.performance)) {\n        supported = true;\n        perf = globalThis.perf_hooks.performance;\n    }\n    else {\n        supported = false;\n    }\n    return supported;\n}\nexport function now() {\n    return isPerformanceSupported() ? perf.now() : Date.now();\n}\n","import { HOOK_PLUGIN_SETTINGS_SET } from './const.js';\nimport { now } from './time.js';\nexport class ApiProxy {\n    constructor(plugin, hook) {\n        this.target = null;\n        this.targetQueue = [];\n        this.onQueue = [];\n        this.plugin = plugin;\n        this.hook = hook;\n        const defaultSettings = {};\n        if (plugin.settings) {\n            for (const id in plugin.settings) {\n                const item = plugin.settings[id];\n                defaultSettings[id] = item.defaultValue;\n            }\n        }\n        const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;\n        let currentSettings = Object.assign({}, defaultSettings);\n        try {\n            const raw = localStorage.getItem(localSettingsSaveId);\n            const data = JSON.parse(raw);\n            Object.assign(currentSettings, data);\n        }\n        catch (e) {\n            // noop\n        }\n        this.fallbacks = {\n            getSettings() {\n                return currentSettings;\n            },\n            setSettings(value) {\n                try {\n                    localStorage.setItem(localSettingsSaveId, JSON.stringify(value));\n                }\n                catch (e) {\n                    // noop\n                }\n                currentSettings = value;\n            },\n            now() {\n                return now();\n            },\n        };\n        if (hook) {\n            hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {\n                if (pluginId === this.plugin.id) {\n                    this.fallbacks.setSettings(value);\n                }\n            });\n        }\n        this.proxiedOn = new Proxy({}, {\n            get: (_target, prop) => {\n                if (this.target) {\n                    return this.target.on[prop];\n                }\n                else {\n                    return (...args) => {\n                        this.onQueue.push({\n                            method: prop,\n                            args,\n                        });\n                    };\n                }\n            },\n        });\n        this.proxiedTarget = new Proxy({}, {\n            get: (_target, prop) => {\n                if (this.target) {\n                    return this.target[prop];\n                }\n                else if (prop === 'on') {\n                    return this.proxiedOn;\n                }\n                else if (Object.keys(this.fallbacks).includes(prop)) {\n                    return (...args) => {\n                        this.targetQueue.push({\n                            method: prop,\n                            args,\n                            resolve: () => { },\n                        });\n                        return this.fallbacks[prop](...args);\n                    };\n                }\n                else {\n                    return (...args) => {\n                        return new Promise((resolve) => {\n                            this.targetQueue.push({\n                                method: prop,\n                                args,\n                                resolve,\n                            });\n                        });\n                    };\n                }\n            },\n        });\n    }\n    async setRealTarget(target) {\n        this.target = target;\n        for (const item of this.onQueue) {\n            this.target.on[item.method](...item.args);\n        }\n        for (const item of this.targetQueue) {\n            item.resolve(await this.target[item.method](...item.args));\n        }\n    }\n}\n","import { getDevtoolsGlobalHook, getTarget, isProxyAvailable } from './env.js';\nimport { HOOK_SETUP } from './const.js';\nimport { ApiProxy } from './proxy.js';\nexport * from './api/index.js';\nexport * from './plugin.js';\nexport * from './time.js';\nexport function setupDevtoolsPlugin(pluginDescriptor, setupFn) {\n    const descriptor = pluginDescriptor;\n    const target = getTarget();\n    const hook = getDevtoolsGlobalHook();\n    const enableProxy = isProxyAvailable && descriptor.enableEarlyProxy;\n    if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {\n        hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);\n    }\n    else {\n        const proxy = enableProxy ? new ApiProxy(descriptor, hook) : null;\n        const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];\n        list.push({\n            pluginDescriptor: descriptor,\n            setupFn,\n            proxy,\n        });\n        if (proxy) {\n            setupFn(proxy.proxiedTarget);\n        }\n    }\n}\n","/*!\n * pinia v2.3.1\n * (c) 2025 Eduardo San Martin Morote\n * @license MIT\n */\nimport { hasInjectionContext, inject, toRaw, watch, unref, markRaw, effectScope, ref, isVue2, isRef, isReactive, set, getCurrentScope, onScopeDispose, getCurrentInstance, reactive, toRef, del, nextTick, computed, toRefs } from 'vue-demi';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\n/**\n * setActivePinia must be called to handle SSR at the top of functions like\n * `fetch`, `setup`, `serverPrefetch` and others\n */\nlet activePinia;\n/**\n * Sets or unsets the active pinia. Used in SSR and internally when calling\n * actions and getters\n *\n * @param pinia - Pinia instance\n */\n// @ts-expect-error: cannot constrain the type of the return\nconst setActivePinia = (pinia) => (activePinia = pinia);\n/**\n * Get the currently active pinia if there is any.\n */\nconst getActivePinia = () => (hasInjectionContext() && inject(piniaSymbol)) || activePinia;\nconst piniaSymbol = ((process.env.NODE_ENV !== 'production') ? Symbol('pinia') : /* istanbul ignore next */ Symbol());\n\nfunction isPlainObject(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no) {\n    return (o &&\n        typeof o === 'object' &&\n        Object.prototype.toString.call(o) === '[object Object]' &&\n        typeof o.toJSON !== 'function');\n}\n// type DeepReadonly<T> = { readonly [P in keyof T]: DeepReadonly<T[P]> }\n// TODO: can we change these to numbers?\n/**\n * Possible types for SubscriptionCallback\n */\nvar MutationType;\n(function (MutationType) {\n    /**\n     * Direct mutation of the state:\n     *\n     * - `store.name = 'new name'`\n     * - `store.$state.name = 'new name'`\n     * - `store.list.push('new item')`\n     */\n    MutationType[\"direct\"] = \"direct\";\n    /**\n     * Mutated the state with `$patch` and an object\n     *\n     * - `store.$patch({ name: 'newName' })`\n     */\n    MutationType[\"patchObject\"] = \"patch object\";\n    /**\n     * Mutated the state with `$patch` and a function\n     *\n     * - `store.$patch(state => state.name = 'newName')`\n     */\n    MutationType[\"patchFunction\"] = \"patch function\";\n    // maybe reset? for $state = {} and $reset\n})(MutationType || (MutationType = {}));\n\nconst IS_CLIENT = typeof window !== 'undefined';\n\n/*\n * FileSaver.js A saveAs() FileSaver implementation.\n *\n * Originally by Eli Grey, adapted as an ESM module by Eduardo San Martin\n * Morote.\n *\n * License : MIT\n */\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nconst _global = /*#__PURE__*/ (() => typeof window === 'object' && window.window === window\n    ? window\n    : typeof self === 'object' && self.self === self\n        ? self\n        : typeof global === 'object' && global.global === global\n            ? global\n            : typeof globalThis === 'object'\n                ? globalThis\n                : { HTMLElement: null })();\nfunction bom(blob, { autoBom = false } = {}) {\n    // prepend BOM for UTF-8 XML and text/* types (including HTML)\n    // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n    if (autoBom &&\n        /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n        return new Blob([String.fromCharCode(0xfeff), blob], { type: blob.type });\n    }\n    return blob;\n}\nfunction download(url, name, opts) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.responseType = 'blob';\n    xhr.onload = function () {\n        saveAs(xhr.response, name, opts);\n    };\n    xhr.onerror = function () {\n        console.error('could not download file');\n    };\n    xhr.send();\n}\nfunction corsEnabled(url) {\n    const xhr = new XMLHttpRequest();\n    // use sync to avoid popup blocker\n    xhr.open('HEAD', url, false);\n    try {\n        xhr.send();\n    }\n    catch (e) { }\n    return xhr.status >= 200 && xhr.status <= 299;\n}\n// `a.click()` doesn't work for all browsers (#465)\nfunction click(node) {\n    try {\n        node.dispatchEvent(new MouseEvent('click'));\n    }\n    catch (e) {\n        const evt = document.createEvent('MouseEvents');\n        evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);\n        node.dispatchEvent(evt);\n    }\n}\nconst _navigator = typeof navigator === 'object' ? navigator : { userAgent: '' };\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nconst isMacOSWebView = /*#__PURE__*/ (() => /Macintosh/.test(_navigator.userAgent) &&\n    /AppleWebKit/.test(_navigator.userAgent) &&\n    !/Safari/.test(_navigator.userAgent))();\nconst saveAs = !IS_CLIENT\n    ? () => { } // noop\n    : // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView or mini program\n        typeof HTMLAnchorElement !== 'undefined' &&\n            'download' in HTMLAnchorElement.prototype &&\n            !isMacOSWebView\n            ? downloadSaveAs\n            : // Use msSaveOrOpenBlob as a second approach\n                'msSaveOrOpenBlob' in _navigator\n                    ? msSaveAs\n                    : // Fallback to using FileReader and a popup\n                        fileSaverSaveAs;\nfunction downloadSaveAs(blob, name = 'download', opts) {\n    const a = document.createElement('a');\n    a.download = name;\n    a.rel = 'noopener'; // tabnabbing\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n    if (typeof blob === 'string') {\n        // Support regular links\n        a.href = blob;\n        if (a.origin !== location.origin) {\n            if (corsEnabled(a.href)) {\n                download(blob, name, opts);\n            }\n            else {\n                a.target = '_blank';\n                click(a);\n            }\n        }\n        else {\n            click(a);\n        }\n    }\n    else {\n        // Support blobs\n        a.href = URL.createObjectURL(blob);\n        setTimeout(function () {\n            URL.revokeObjectURL(a.href);\n        }, 4e4); // 40s\n        setTimeout(function () {\n            click(a);\n        }, 0);\n    }\n}\nfunction msSaveAs(blob, name = 'download', opts) {\n    if (typeof blob === 'string') {\n        if (corsEnabled(blob)) {\n            download(blob, name, opts);\n        }\n        else {\n            const a = document.createElement('a');\n            a.href = blob;\n            a.target = '_blank';\n            setTimeout(function () {\n                click(a);\n            });\n        }\n    }\n    else {\n        // @ts-ignore: works on windows\n        navigator.msSaveOrOpenBlob(bom(blob, opts), name);\n    }\n}\nfunction fileSaverSaveAs(blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank');\n    if (popup) {\n        popup.document.title = popup.document.body.innerText = 'downloading...';\n    }\n    if (typeof blob === 'string')\n        return download(blob, name, opts);\n    const force = blob.type === 'application/octet-stream';\n    const isSafari = /constructor/i.test(String(_global.HTMLElement)) || 'safari' in _global;\n    const isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent);\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) &&\n        typeof FileReader !== 'undefined') {\n        // Safari doesn't allow downloading of blob URLs\n        const reader = new FileReader();\n        reader.onloadend = function () {\n            let url = reader.result;\n            if (typeof url !== 'string') {\n                popup = null;\n                throw new Error('Wrong reader.result type');\n            }\n            url = isChromeIOS\n                ? url\n                : url.replace(/^data:[^;]*;/, 'data:attachment/file;');\n            if (popup) {\n                popup.location.href = url;\n            }\n            else {\n                location.assign(url);\n            }\n            popup = null; // reverse-tabnabbing #460\n        };\n        reader.readAsDataURL(blob);\n    }\n    else {\n        const url = URL.createObjectURL(blob);\n        if (popup)\n            popup.location.assign(url);\n        else\n            location.href = url;\n        popup = null; // reverse-tabnabbing #460\n        setTimeout(function () {\n            URL.revokeObjectURL(url);\n        }, 4e4); // 40s\n    }\n}\n\n/**\n * Shows a toast or console.log\n *\n * @param message - message to log\n * @param type - different color of the tooltip\n */\nfunction toastMessage(message, type) {\n    const piniaMessage = '🍍 ' + message;\n    if (typeof __VUE_DEVTOOLS_TOAST__ === 'function') {\n        // No longer available :(\n        __VUE_DEVTOOLS_TOAST__(piniaMessage, type);\n    }\n    else if (type === 'error') {\n        console.error(piniaMessage);\n    }\n    else if (type === 'warn') {\n        console.warn(piniaMessage);\n    }\n    else {\n        console.log(piniaMessage);\n    }\n}\nfunction isPinia(o) {\n    return '_a' in o && 'install' in o;\n}\n\n/**\n * This file contain devtools actions, they are not Pinia actions.\n */\n// ---\nfunction checkClipboardAccess() {\n    if (!('clipboard' in navigator)) {\n        toastMessage(`Your browser doesn't support the Clipboard API`, 'error');\n        return true;\n    }\n}\nfunction checkNotFocusedError(error) {\n    if (error instanceof Error &&\n        error.message.toLowerCase().includes('document is not focused')) {\n        toastMessage('You need to activate the \"Emulate a focused page\" setting in the \"Rendering\" panel of devtools.', 'warn');\n        return true;\n    }\n    return false;\n}\nasync function actionGlobalCopyState(pinia) {\n    if (checkClipboardAccess())\n        return;\n    try {\n        await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));\n        toastMessage('Global state copied to clipboard.');\n    }\n    catch (error) {\n        if (checkNotFocusedError(error))\n            return;\n        toastMessage(`Failed to serialize the state. Check the console for more details.`, 'error');\n        console.error(error);\n    }\n}\nasync function actionGlobalPasteState(pinia) {\n    if (checkClipboardAccess())\n        return;\n    try {\n        loadStoresState(pinia, JSON.parse(await navigator.clipboard.readText()));\n        toastMessage('Global state pasted from clipboard.');\n    }\n    catch (error) {\n        if (checkNotFocusedError(error))\n            return;\n        toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, 'error');\n        console.error(error);\n    }\n}\nasync function actionGlobalSaveState(pinia) {\n    try {\n        saveAs(new Blob([JSON.stringify(pinia.state.value)], {\n            type: 'text/plain;charset=utf-8',\n        }), 'pinia-state.json');\n    }\n    catch (error) {\n        toastMessage(`Failed to export the state as JSON. Check the console for more details.`, 'error');\n        console.error(error);\n    }\n}\nlet fileInput;\nfunction getFileOpener() {\n    if (!fileInput) {\n        fileInput = document.createElement('input');\n        fileInput.type = 'file';\n        fileInput.accept = '.json';\n    }\n    function openFile() {\n        return new Promise((resolve, reject) => {\n            fileInput.onchange = async () => {\n                const files = fileInput.files;\n                if (!files)\n                    return resolve(null);\n                const file = files.item(0);\n                if (!file)\n                    return resolve(null);\n                return resolve({ text: await file.text(), file });\n            };\n            // @ts-ignore: TODO: changed from 4.3 to 4.4\n            fileInput.oncancel = () => resolve(null);\n            fileInput.onerror = reject;\n            fileInput.click();\n        });\n    }\n    return openFile;\n}\nasync function actionGlobalOpenStateFile(pinia) {\n    try {\n        const open = getFileOpener();\n        const result = await open();\n        if (!result)\n            return;\n        const { text, file } = result;\n        loadStoresState(pinia, JSON.parse(text));\n        toastMessage(`Global state imported from \"${file.name}\".`);\n    }\n    catch (error) {\n        toastMessage(`Failed to import the state from JSON. Check the console for more details.`, 'error');\n        console.error(error);\n    }\n}\nfunction loadStoresState(pinia, state) {\n    for (const key in state) {\n        const storeState = pinia.state.value[key];\n        // store is already instantiated, patch it\n        if (storeState) {\n            Object.assign(storeState, state[key]);\n        }\n        else {\n            // store is not instantiated, set the initial state\n            pinia.state.value[key] = state[key];\n        }\n    }\n}\n\nfunction formatDisplay(display) {\n    return {\n        _custom: {\n            display,\n        },\n    };\n}\nconst PINIA_ROOT_LABEL = '🍍 Pinia (root)';\nconst PINIA_ROOT_ID = '_root';\nfunction formatStoreForInspectorTree(store) {\n    return isPinia(store)\n        ? {\n            id: PINIA_ROOT_ID,\n            label: PINIA_ROOT_LABEL,\n        }\n        : {\n            id: store.$id,\n            label: store.$id,\n        };\n}\nfunction formatStoreForInspectorState(store) {\n    if (isPinia(store)) {\n        const storeNames = Array.from(store._s.keys());\n        const storeMap = store._s;\n        const state = {\n            state: storeNames.map((storeId) => ({\n                editable: true,\n                key: storeId,\n                value: store.state.value[storeId],\n            })),\n            getters: storeNames\n                .filter((id) => storeMap.get(id)._getters)\n                .map((id) => {\n                const store = storeMap.get(id);\n                return {\n                    editable: false,\n                    key: id,\n                    value: store._getters.reduce((getters, key) => {\n                        getters[key] = store[key];\n                        return getters;\n                    }, {}),\n                };\n            }),\n        };\n        return state;\n    }\n    const state = {\n        state: Object.keys(store.$state).map((key) => ({\n            editable: true,\n            key,\n            value: store.$state[key],\n        })),\n    };\n    // avoid adding empty getters\n    if (store._getters && store._getters.length) {\n        state.getters = store._getters.map((getterName) => ({\n            editable: false,\n            key: getterName,\n            value: store[getterName],\n        }));\n    }\n    if (store._customProperties.size) {\n        state.customProperties = Array.from(store._customProperties).map((key) => ({\n            editable: true,\n            key,\n            value: store[key],\n        }));\n    }\n    return state;\n}\nfunction formatEventData(events) {\n    if (!events)\n        return {};\n    if (Array.isArray(events)) {\n        // TODO: handle add and delete for arrays and objects\n        return events.reduce((data, event) => {\n            data.keys.push(event.key);\n            data.operations.push(event.type);\n            data.oldValue[event.key] = event.oldValue;\n            data.newValue[event.key] = event.newValue;\n            return data;\n        }, {\n            oldValue: {},\n            keys: [],\n            operations: [],\n            newValue: {},\n        });\n    }\n    else {\n        return {\n            operation: formatDisplay(events.type),\n            key: formatDisplay(events.key),\n            oldValue: events.oldValue,\n            newValue: events.newValue,\n        };\n    }\n}\nfunction formatMutationType(type) {\n    switch (type) {\n        case MutationType.direct:\n            return 'mutation';\n        case MutationType.patchFunction:\n            return '$patch';\n        case MutationType.patchObject:\n            return '$patch';\n        default:\n            return 'unknown';\n    }\n}\n\n// timeline can be paused when directly changing the state\nlet isTimelineActive = true;\nconst componentStateTypes = [];\nconst MUTATIONS_LAYER_ID = 'pinia:mutations';\nconst INSPECTOR_ID = 'pinia';\nconst { assign: assign$1 } = Object;\n/**\n * Gets the displayed name of a store in devtools\n *\n * @param id - id of the store\n * @returns a formatted string\n */\nconst getStoreType = (id) => '🍍 ' + id;\n/**\n * Add the pinia plugin without any store. Allows displaying a Pinia plugin tab\n * as soon as it is added to the application.\n *\n * @param app - Vue application\n * @param pinia - pinia instance\n */\nfunction registerPiniaDevtools(app, pinia) {\n    setupDevtoolsPlugin({\n        id: 'dev.esm.pinia',\n        label: 'Pinia 🍍',\n        logo: 'https://pinia.vuejs.org/logo.svg',\n        packageName: 'pinia',\n        homepage: 'https://pinia.vuejs.org',\n        componentStateTypes,\n        app,\n    }, (api) => {\n        if (typeof api.now !== 'function') {\n            toastMessage('You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.');\n        }\n        api.addTimelineLayer({\n            id: MUTATIONS_LAYER_ID,\n            label: `Pinia 🍍`,\n            color: 0xe5df88,\n        });\n        api.addInspector({\n            id: INSPECTOR_ID,\n            label: 'Pinia 🍍',\n            icon: 'storage',\n            treeFilterPlaceholder: 'Search stores',\n            actions: [\n                {\n                    icon: 'content_copy',\n                    action: () => {\n                        actionGlobalCopyState(pinia);\n                    },\n                    tooltip: 'Serialize and copy the state',\n                },\n                {\n                    icon: 'content_paste',\n                    action: async () => {\n                        await actionGlobalPasteState(pinia);\n                        api.sendInspectorTree(INSPECTOR_ID);\n                        api.sendInspectorState(INSPECTOR_ID);\n                    },\n                    tooltip: 'Replace the state with the content of your clipboard',\n                },\n                {\n                    icon: 'save',\n                    action: () => {\n                        actionGlobalSaveState(pinia);\n                    },\n                    tooltip: 'Save the state as a JSON file',\n                },\n                {\n                    icon: 'folder_open',\n                    action: async () => {\n                        await actionGlobalOpenStateFile(pinia);\n                        api.sendInspectorTree(INSPECTOR_ID);\n                        api.sendInspectorState(INSPECTOR_ID);\n                    },\n                    tooltip: 'Import the state from a JSON file',\n                },\n            ],\n            nodeActions: [\n                {\n                    icon: 'restore',\n                    tooltip: 'Reset the state (with \"$reset\")',\n                    action: (nodeId) => {\n                        const store = pinia._s.get(nodeId);\n                        if (!store) {\n                            toastMessage(`Cannot reset \"${nodeId}\" store because it wasn't found.`, 'warn');\n                        }\n                        else if (typeof store.$reset !== 'function') {\n                            toastMessage(`Cannot reset \"${nodeId}\" store because it doesn't have a \"$reset\" method implemented.`, 'warn');\n                        }\n                        else {\n                            store.$reset();\n                            toastMessage(`Store \"${nodeId}\" reset.`);\n                        }\n                    },\n                },\n            ],\n        });\n        api.on.inspectComponent((payload, ctx) => {\n            const proxy = (payload.componentInstance &&\n                payload.componentInstance.proxy);\n            if (proxy && proxy._pStores) {\n                const piniaStores = payload.componentInstance.proxy._pStores;\n                Object.values(piniaStores).forEach((store) => {\n                    payload.instanceData.state.push({\n                        type: getStoreType(store.$id),\n                        key: 'state',\n                        editable: true,\n                        value: store._isOptionsAPI\n                            ? {\n                                _custom: {\n                                    value: toRaw(store.$state),\n                                    actions: [\n                                        {\n                                            icon: 'restore',\n                                            tooltip: 'Reset the state of this store',\n                                            action: () => store.$reset(),\n                                        },\n                                    ],\n                                },\n                            }\n                            : // NOTE: workaround to unwrap transferred refs\n                                Object.keys(store.$state).reduce((state, key) => {\n                                    state[key] = store.$state[key];\n                                    return state;\n                                }, {}),\n                    });\n                    if (store._getters && store._getters.length) {\n                        payload.instanceData.state.push({\n                            type: getStoreType(store.$id),\n                            key: 'getters',\n                            editable: false,\n                            value: store._getters.reduce((getters, key) => {\n                                try {\n                                    getters[key] = store[key];\n                                }\n                                catch (error) {\n                                    // @ts-expect-error: we just want to show it in devtools\n                                    getters[key] = error;\n                                }\n                                return getters;\n                            }, {}),\n                        });\n                    }\n                });\n            }\n        });\n        api.on.getInspectorTree((payload) => {\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n                let stores = [pinia];\n                stores = stores.concat(Array.from(pinia._s.values()));\n                payload.rootNodes = (payload.filter\n                    ? stores.filter((store) => '$id' in store\n                        ? store.$id\n                            .toLowerCase()\n                            .includes(payload.filter.toLowerCase())\n                        : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase()))\n                    : stores).map(formatStoreForInspectorTree);\n            }\n        });\n        // Expose pinia instance as $pinia to window\n        globalThis.$pinia = pinia;\n        api.on.getInspectorState((payload) => {\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n                const inspectedStore = payload.nodeId === PINIA_ROOT_ID\n                    ? pinia\n                    : pinia._s.get(payload.nodeId);\n                if (!inspectedStore) {\n                    // this could be the selected store restored for a different project\n                    // so it's better not to say anything here\n                    return;\n                }\n                if (inspectedStore) {\n                    // Expose selected store as $store to window\n                    if (payload.nodeId !== PINIA_ROOT_ID)\n                        globalThis.$store = toRaw(inspectedStore);\n                    payload.state = formatStoreForInspectorState(inspectedStore);\n                }\n            }\n        });\n        api.on.editInspectorState((payload, ctx) => {\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n                const inspectedStore = payload.nodeId === PINIA_ROOT_ID\n                    ? pinia\n                    : pinia._s.get(payload.nodeId);\n                if (!inspectedStore) {\n                    return toastMessage(`store \"${payload.nodeId}\" not found`, 'error');\n                }\n                const { path } = payload;\n                if (!isPinia(inspectedStore)) {\n                    // access only the state\n                    if (path.length !== 1 ||\n                        !inspectedStore._customProperties.has(path[0]) ||\n                        path[0] in inspectedStore.$state) {\n                        path.unshift('$state');\n                    }\n                }\n                else {\n                    // Root access, we can omit the `.value` because the devtools API does it for us\n                    path.unshift('state');\n                }\n                isTimelineActive = false;\n                payload.set(inspectedStore, path, payload.state.value);\n                isTimelineActive = true;\n            }\n        });\n        api.on.editComponentState((payload) => {\n            if (payload.type.startsWith('🍍')) {\n                const storeId = payload.type.replace(/^🍍\\s*/, '');\n                const store = pinia._s.get(storeId);\n                if (!store) {\n                    return toastMessage(`store \"${storeId}\" not found`, 'error');\n                }\n                const { path } = payload;\n                if (path[0] !== 'state') {\n                    return toastMessage(`Invalid path for store \"${storeId}\":\\n${path}\\nOnly state can be modified.`);\n                }\n                // rewrite the first entry to be able to directly set the state as\n                // well as any other path\n                path[0] = '$state';\n                isTimelineActive = false;\n                payload.set(store, path, payload.state.value);\n                isTimelineActive = true;\n            }\n        });\n    });\n}\nfunction addStoreToDevtools(app, store) {\n    if (!componentStateTypes.includes(getStoreType(store.$id))) {\n        componentStateTypes.push(getStoreType(store.$id));\n    }\n    setupDevtoolsPlugin({\n        id: 'dev.esm.pinia',\n        label: 'Pinia 🍍',\n        logo: 'https://pinia.vuejs.org/logo.svg',\n        packageName: 'pinia',\n        homepage: 'https://pinia.vuejs.org',\n        componentStateTypes,\n        app,\n        settings: {\n            logStoreChanges: {\n                label: 'Notify about new/deleted stores',\n                type: 'boolean',\n                defaultValue: true,\n            },\n            // useEmojis: {\n            //   label: 'Use emojis in messages ⚡️',\n            //   type: 'boolean',\n            //   defaultValue: true,\n            // },\n        },\n    }, (api) => {\n        // gracefully handle errors\n        const now = typeof api.now === 'function' ? api.now.bind(api) : Date.now;\n        store.$onAction(({ after, onError, name, args }) => {\n            const groupId = runningActionId++;\n            api.addTimelineEvent({\n                layerId: MUTATIONS_LAYER_ID,\n                event: {\n                    time: now(),\n                    title: '🛫 ' + name,\n                    subtitle: 'start',\n                    data: {\n                        store: formatDisplay(store.$id),\n                        action: formatDisplay(name),\n                        args,\n                    },\n                    groupId,\n                },\n            });\n            after((result) => {\n                activeAction = undefined;\n                api.addTimelineEvent({\n                    layerId: MUTATIONS_LAYER_ID,\n                    event: {\n                        time: now(),\n                        title: '🛬 ' + name,\n                        subtitle: 'end',\n                        data: {\n                            store: formatDisplay(store.$id),\n                            action: formatDisplay(name),\n                            args,\n                            result,\n                        },\n                        groupId,\n                    },\n                });\n            });\n            onError((error) => {\n                activeAction = undefined;\n                api.addTimelineEvent({\n                    layerId: MUTATIONS_LAYER_ID,\n                    event: {\n                        time: now(),\n                        logType: 'error',\n                        title: '💥 ' + name,\n                        subtitle: 'end',\n                        data: {\n                            store: formatDisplay(store.$id),\n                            action: formatDisplay(name),\n                            args,\n                            error,\n                        },\n                        groupId,\n                    },\n                });\n            });\n        }, true);\n        store._customProperties.forEach((name) => {\n            watch(() => unref(store[name]), (newValue, oldValue) => {\n                api.notifyComponentUpdate();\n                api.sendInspectorState(INSPECTOR_ID);\n                if (isTimelineActive) {\n                    api.addTimelineEvent({\n                        layerId: MUTATIONS_LAYER_ID,\n                        event: {\n                            time: now(),\n                            title: 'Change',\n                            subtitle: name,\n                            data: {\n                                newValue,\n                                oldValue,\n                            },\n                            groupId: activeAction,\n                        },\n                    });\n                }\n            }, { deep: true });\n        });\n        store.$subscribe(({ events, type }, state) => {\n            api.notifyComponentUpdate();\n            api.sendInspectorState(INSPECTOR_ID);\n            if (!isTimelineActive)\n                return;\n            // rootStore.state[store.id] = state\n            const eventData = {\n                time: now(),\n                title: formatMutationType(type),\n                data: assign$1({ store: formatDisplay(store.$id) }, formatEventData(events)),\n                groupId: activeAction,\n            };\n            if (type === MutationType.patchFunction) {\n                eventData.subtitle = '⤵️';\n            }\n            else if (type === MutationType.patchObject) {\n                eventData.subtitle = '🧩';\n            }\n            else if (events && !Array.isArray(events)) {\n                eventData.subtitle = events.type;\n            }\n            if (events) {\n                eventData.data['rawEvent(s)'] = {\n                    _custom: {\n                        display: 'DebuggerEvent',\n                        type: 'object',\n                        tooltip: 'raw DebuggerEvent[]',\n                        value: events,\n                    },\n                };\n            }\n            api.addTimelineEvent({\n                layerId: MUTATIONS_LAYER_ID,\n                event: eventData,\n            });\n        }, { detached: true, flush: 'sync' });\n        const hotUpdate = store._hotUpdate;\n        store._hotUpdate = markRaw((newStore) => {\n            hotUpdate(newStore);\n            api.addTimelineEvent({\n                layerId: MUTATIONS_LAYER_ID,\n                event: {\n                    time: now(),\n                    title: '🔥 ' + store.$id,\n                    subtitle: 'HMR update',\n                    data: {\n                        store: formatDisplay(store.$id),\n                        info: formatDisplay(`HMR update`),\n                    },\n                },\n            });\n            // update the devtools too\n            api.notifyComponentUpdate();\n            api.sendInspectorTree(INSPECTOR_ID);\n            api.sendInspectorState(INSPECTOR_ID);\n        });\n        const { $dispose } = store;\n        store.$dispose = () => {\n            $dispose();\n            api.notifyComponentUpdate();\n            api.sendInspectorTree(INSPECTOR_ID);\n            api.sendInspectorState(INSPECTOR_ID);\n            api.getSettings().logStoreChanges &&\n                toastMessage(`Disposed \"${store.$id}\" store 🗑`);\n        };\n        // trigger an update so it can display new registered stores\n        api.notifyComponentUpdate();\n        api.sendInspectorTree(INSPECTOR_ID);\n        api.sendInspectorState(INSPECTOR_ID);\n        api.getSettings().logStoreChanges &&\n            toastMessage(`\"${store.$id}\" store installed 🆕`);\n    });\n}\nlet runningActionId = 0;\nlet activeAction;\n/**\n * Patches a store to enable action grouping in devtools by wrapping the store with a Proxy that is passed as the\n * context of all actions, allowing us to set `runningAction` on each access and effectively associating any state\n * mutation to the action.\n *\n * @param store - store to patch\n * @param actionNames - list of actionst to patch\n */\nfunction patchActionForGrouping(store, actionNames, wrapWithProxy) {\n    // original actions of the store as they are given by pinia. We are going to override them\n    const actions = actionNames.reduce((storeActions, actionName) => {\n        // use toRaw to avoid tracking #541\n        storeActions[actionName] = toRaw(store)[actionName];\n        return storeActions;\n    }, {});\n    for (const actionName in actions) {\n        store[actionName] = function () {\n            // the running action id is incremented in a before action hook\n            const _actionId = runningActionId;\n            const trackedStore = wrapWithProxy\n                ? new Proxy(store, {\n                    get(...args) {\n                        activeAction = _actionId;\n                        return Reflect.get(...args);\n                    },\n                    set(...args) {\n                        activeAction = _actionId;\n                        return Reflect.set(...args);\n                    },\n                })\n                : store;\n            // For Setup Stores we need https://github.com/tc39/proposal-async-context\n            activeAction = _actionId;\n            const retValue = actions[actionName].apply(trackedStore, arguments);\n            // this is safer as async actions in Setup Stores would associate mutations done outside of the action\n            activeAction = undefined;\n            return retValue;\n        };\n    }\n}\n/**\n * pinia.use(devtoolsPlugin)\n */\nfunction devtoolsPlugin({ app, store, options }) {\n    // HMR module\n    if (store.$id.startsWith('__hot:')) {\n        return;\n    }\n    // detect option api vs setup api\n    store._isOptionsAPI = !!options.state;\n    // Do not overwrite actions mocked by @pinia/testing (#2298)\n    if (!store._p._testing) {\n        patchActionForGrouping(store, Object.keys(options.actions), store._isOptionsAPI);\n        // Upgrade the HMR to also update the new actions\n        const originalHotUpdate = store._hotUpdate;\n        toRaw(store)._hotUpdate = function (newStore) {\n            originalHotUpdate.apply(this, arguments);\n            patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions), !!store._isOptionsAPI);\n        };\n    }\n    addStoreToDevtools(app, \n    // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?\n    store);\n}\n\n/**\n * Creates a Pinia instance to be used by the application\n */\nfunction createPinia() {\n    const scope = effectScope(true);\n    // NOTE: here we could check the window object for a state and directly set it\n    // if there is anything like it with Vue 3 SSR\n    const state = scope.run(() => ref({}));\n    let _p = [];\n    // plugins added before calling app.use(pinia)\n    let toBeInstalled = [];\n    const pinia = markRaw({\n        install(app) {\n            // this allows calling useStore() outside of a component setup after\n            // installing pinia's plugin\n            setActivePinia(pinia);\n            if (!isVue2) {\n                pinia._a = app;\n                app.provide(piniaSymbol, pinia);\n                app.config.globalProperties.$pinia = pinia;\n                /* istanbul ignore else */\n                if ((((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test')) && IS_CLIENT) {\n                    registerPiniaDevtools(app, pinia);\n                }\n                toBeInstalled.forEach((plugin) => _p.push(plugin));\n                toBeInstalled = [];\n            }\n        },\n        use(plugin) {\n            if (!this._a && !isVue2) {\n                toBeInstalled.push(plugin);\n            }\n            else {\n                _p.push(plugin);\n            }\n            return this;\n        },\n        _p,\n        // it's actually undefined here\n        // @ts-expect-error\n        _a: null,\n        _e: scope,\n        _s: new Map(),\n        state,\n    });\n    // pinia devtools rely on dev only features so they cannot be forced unless\n    // the dev build of Vue is used. Avoid old browsers like IE11.\n    if ((((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test')) && IS_CLIENT && typeof Proxy !== 'undefined') {\n        pinia.use(devtoolsPlugin);\n    }\n    return pinia;\n}\n/**\n * Dispose a Pinia instance by stopping its effectScope and removing the state, plugins and stores. This is mostly\n * useful in tests, with both a testing pinia or a regular pinia and in applications that use multiple pinia instances.\n * Once disposed, the pinia instance cannot be used anymore.\n *\n * @param pinia - pinia instance\n */\nfunction disposePinia(pinia) {\n    pinia._e.stop();\n    pinia._s.clear();\n    pinia._p.splice(0);\n    pinia.state.value = {};\n    // @ts-expect-error: non valid\n    pinia._a = null;\n}\n\n/**\n * Checks if a function is a `StoreDefinition`.\n *\n * @param fn - object to test\n * @returns true if `fn` is a StoreDefinition\n */\nconst isUseStore = (fn) => {\n    return typeof fn === 'function' && typeof fn.$id === 'string';\n};\n/**\n * Mutates in place `newState` with `oldState` to _hot update_ it. It will\n * remove any key not existing in `newState` and recursively merge plain\n * objects.\n *\n * @param newState - new state object to be patched\n * @param oldState - old state that should be used to patch newState\n * @returns - newState\n */\nfunction patchObject(newState, oldState) {\n    // no need to go through symbols because they cannot be serialized anyway\n    for (const key in oldState) {\n        const subPatch = oldState[key];\n        // skip the whole sub tree\n        if (!(key in newState)) {\n            continue;\n        }\n        const targetValue = newState[key];\n        if (isPlainObject(targetValue) &&\n            isPlainObject(subPatch) &&\n            !isRef(subPatch) &&\n            !isReactive(subPatch)) {\n            newState[key] = patchObject(targetValue, subPatch);\n        }\n        else {\n            // objects are either a bit more complex (e.g. refs) or primitives, so we\n            // just set the whole thing\n            if (isVue2) {\n                set(newState, key, subPatch);\n            }\n            else {\n                newState[key] = subPatch;\n            }\n        }\n    }\n    return newState;\n}\n/**\n * Creates an _accept_ function to pass to `import.meta.hot` in Vite applications.\n *\n * @example\n * ```js\n * const useUser = defineStore(...)\n * if (import.meta.hot) {\n *   import.meta.hot.accept(acceptHMRUpdate(useUser, import.meta.hot))\n * }\n * ```\n *\n * @param initialUseStore - return of the defineStore to hot update\n * @param hot - `import.meta.hot`\n */\nfunction acceptHMRUpdate(initialUseStore, hot) {\n    // strip as much as possible from iife.prod\n    if (!(process.env.NODE_ENV !== 'production')) {\n        return () => { };\n    }\n    return (newModule) => {\n        const pinia = hot.data.pinia || initialUseStore._pinia;\n        if (!pinia) {\n            // this store is still not used\n            return;\n        }\n        // preserve the pinia instance across loads\n        hot.data.pinia = pinia;\n        // console.log('got data', newStore)\n        for (const exportName in newModule) {\n            const useStore = newModule[exportName];\n            // console.log('checking for', exportName)\n            if (isUseStore(useStore) && pinia._s.has(useStore.$id)) {\n                // console.log('Accepting update for', useStore.$id)\n                const id = useStore.$id;\n                if (id !== initialUseStore.$id) {\n                    console.warn(`The id of the store changed from \"${initialUseStore.$id}\" to \"${id}\". Reloading.`);\n                    // return import.meta.hot.invalidate()\n                    return hot.invalidate();\n                }\n                const existingStore = pinia._s.get(id);\n                if (!existingStore) {\n                    console.log(`[Pinia]: skipping hmr because store doesn't exist yet`);\n                    return;\n                }\n                useStore(pinia, existingStore);\n            }\n        }\n    };\n}\n\nconst noop = () => { };\nfunction addSubscription(subscriptions, callback, detached, onCleanup = noop) {\n    subscriptions.push(callback);\n    const removeSubscription = () => {\n        const idx = subscriptions.indexOf(callback);\n        if (idx > -1) {\n            subscriptions.splice(idx, 1);\n            onCleanup();\n        }\n    };\n    if (!detached && getCurrentScope()) {\n        onScopeDispose(removeSubscription);\n    }\n    return removeSubscription;\n}\nfunction triggerSubscriptions(subscriptions, ...args) {\n    subscriptions.slice().forEach((callback) => {\n        callback(...args);\n    });\n}\n\nconst fallbackRunWithContext = (fn) => fn();\n/**\n * Marks a function as an action for `$onAction`\n * @internal\n */\nconst ACTION_MARKER = Symbol();\n/**\n * Action name symbol. Allows to add a name to an action after defining it\n * @internal\n */\nconst ACTION_NAME = Symbol();\nfunction mergeReactiveObjects(target, patchToApply) {\n    // Handle Map instances\n    if (target instanceof Map && patchToApply instanceof Map) {\n        patchToApply.forEach((value, key) => target.set(key, value));\n    }\n    else if (target instanceof Set && patchToApply instanceof Set) {\n        // Handle Set instances\n        patchToApply.forEach(target.add, target);\n    }\n    // no need to go through symbols because they cannot be serialized anyway\n    for (const key in patchToApply) {\n        if (!patchToApply.hasOwnProperty(key))\n            continue;\n        const subPatch = patchToApply[key];\n        const targetValue = target[key];\n        if (isPlainObject(targetValue) &&\n            isPlainObject(subPatch) &&\n            target.hasOwnProperty(key) &&\n            !isRef(subPatch) &&\n            !isReactive(subPatch)) {\n            // NOTE: here I wanted to warn about inconsistent types but it's not possible because in setup stores one might\n            // start the value of a property as a certain type e.g. a Map, and then for some reason, during SSR, change that\n            // to `undefined`. When trying to hydrate, we want to override the Map with `undefined`.\n            target[key] = mergeReactiveObjects(targetValue, subPatch);\n        }\n        else {\n            // @ts-expect-error: subPatch is a valid value\n            target[key] = subPatch;\n        }\n    }\n    return target;\n}\nconst skipHydrateSymbol = (process.env.NODE_ENV !== 'production')\n    ? Symbol('pinia:skipHydration')\n    : /* istanbul ignore next */ Symbol();\n/**\n * Tells Pinia to skip the hydration process of a given object. This is useful in setup stores (only) when you return a\n * stateful object in the store but it isn't really state. e.g. returning a router instance in a setup store.\n *\n * @param obj - target object\n * @returns obj\n */\nfunction skipHydrate(obj) {\n    return Object.defineProperty(obj, skipHydrateSymbol, {});\n}\n/**\n * Returns whether a value should be hydrated\n *\n * @param obj - target variable\n * @returns true if `obj` should be hydrated\n */\nfunction shouldHydrate(obj) {\n    return !isPlainObject(obj) || !obj.hasOwnProperty(skipHydrateSymbol);\n}\nconst { assign } = Object;\nfunction isComputed(o) {\n    return !!(isRef(o) && o.effect);\n}\nfunction createOptionsStore(id, options, pinia, hot) {\n    const { state, actions, getters } = options;\n    const initialState = pinia.state.value[id];\n    let store;\n    function setup() {\n        if (!initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\n            /* istanbul ignore if */\n            if (isVue2) {\n                set(pinia.state.value, id, state ? state() : {});\n            }\n            else {\n                pinia.state.value[id] = state ? state() : {};\n            }\n        }\n        // avoid creating a state in pinia.state.value\n        const localState = (process.env.NODE_ENV !== 'production') && hot\n            ? // use ref() to unwrap refs inside state TODO: check if this is still necessary\n                toRefs(ref(state ? state() : {}).value)\n            : toRefs(pinia.state.value[id]);\n        return assign(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {\n            if ((process.env.NODE_ENV !== 'production') && name in localState) {\n                console.warn(`[🍍]: A getter cannot have the same name as another state property. Rename one of them. Found with \"${name}\" in store \"${id}\".`);\n            }\n            computedGetters[name] = markRaw(computed(() => {\n                setActivePinia(pinia);\n                // it was created just before\n                const store = pinia._s.get(id);\n                // allow cross using stores\n                /* istanbul ignore if */\n                if (isVue2 && !store._r)\n                    return;\n                // @ts-expect-error\n                // return getters![name].call(context, context)\n                // TODO: avoid reading the getter while assigning with a global variable\n                return getters[name].call(store, store);\n            }));\n            return computedGetters;\n        }, {}));\n    }\n    store = createSetupStore(id, setup, options, pinia, hot, true);\n    return store;\n}\nfunction createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {\n    let scope;\n    const optionsForPlugin = assign({ actions: {} }, options);\n    /* istanbul ignore if */\n    if ((process.env.NODE_ENV !== 'production') && !pinia._e.active) {\n        throw new Error('Pinia destroyed');\n    }\n    // watcher options for $subscribe\n    const $subscribeOptions = { deep: true };\n    /* istanbul ignore else */\n    if ((process.env.NODE_ENV !== 'production') && !isVue2) {\n        $subscribeOptions.onTrigger = (event) => {\n            /* istanbul ignore else */\n            if (isListening) {\n                debuggerEvents = event;\n                // avoid triggering this while the store is being built and the state is being set in pinia\n            }\n            else if (isListening == false && !store._hotUpdating) {\n                // let patch send all the events together later\n                /* istanbul ignore else */\n                if (Array.isArray(debuggerEvents)) {\n                    debuggerEvents.push(event);\n                }\n                else {\n                    console.error('🍍 debuggerEvents should be an array. This is most likely an internal Pinia bug.');\n                }\n            }\n        };\n    }\n    // internal state\n    let isListening; // set to true at the end\n    let isSyncListening; // set to true at the end\n    let subscriptions = [];\n    let actionSubscriptions = [];\n    let debuggerEvents;\n    const initialState = pinia.state.value[$id];\n    // avoid setting the state for option stores if it is set\n    // by the setup\n    if (!isOptionsStore && !initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\n        /* istanbul ignore if */\n        if (isVue2) {\n            set(pinia.state.value, $id, {});\n        }\n        else {\n            pinia.state.value[$id] = {};\n        }\n    }\n    const hotState = ref({});\n    // avoid triggering too many listeners\n    // https://github.com/vuejs/pinia/issues/1129\n    let activeListener;\n    function $patch(partialStateOrMutator) {\n        let subscriptionMutation;\n        isListening = isSyncListening = false;\n        // reset the debugger events since patches are sync\n        /* istanbul ignore else */\n        if ((process.env.NODE_ENV !== 'production')) {\n            debuggerEvents = [];\n        }\n        if (typeof partialStateOrMutator === 'function') {\n            partialStateOrMutator(pinia.state.value[$id]);\n            subscriptionMutation = {\n                type: MutationType.patchFunction,\n                storeId: $id,\n                events: debuggerEvents,\n            };\n        }\n        else {\n            mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);\n            subscriptionMutation = {\n                type: MutationType.patchObject,\n                payload: partialStateOrMutator,\n                storeId: $id,\n                events: debuggerEvents,\n            };\n        }\n        const myListenerId = (activeListener = Symbol());\n        nextTick().then(() => {\n            if (activeListener === myListenerId) {\n                isListening = true;\n            }\n        });\n        isSyncListening = true;\n        // because we paused the watcher, we need to manually call the subscriptions\n        triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);\n    }\n    const $reset = isOptionsStore\n        ? function $reset() {\n            const { state } = options;\n            const newState = state ? state() : {};\n            // we use a patch to group all changes into one single subscription\n            this.$patch(($state) => {\n                // @ts-expect-error: FIXME: shouldn't error?\n                assign($state, newState);\n            });\n        }\n        : /* istanbul ignore next */\n            (process.env.NODE_ENV !== 'production')\n                ? () => {\n                    throw new Error(`🍍: Store \"${$id}\" is built using the setup syntax and does not implement $reset().`);\n                }\n                : noop;\n    function $dispose() {\n        scope.stop();\n        subscriptions = [];\n        actionSubscriptions = [];\n        pinia._s.delete($id);\n    }\n    /**\n     * Helper that wraps function so it can be tracked with $onAction\n     * @param fn - action to wrap\n     * @param name - name of the action\n     */\n    const action = (fn, name = '') => {\n        if (ACTION_MARKER in fn) {\n            fn[ACTION_NAME] = name;\n            return fn;\n        }\n        const wrappedAction = function () {\n            setActivePinia(pinia);\n            const args = Array.from(arguments);\n            const afterCallbackList = [];\n            const onErrorCallbackList = [];\n            function after(callback) {\n                afterCallbackList.push(callback);\n            }\n            function onError(callback) {\n                onErrorCallbackList.push(callback);\n            }\n            // @ts-expect-error\n            triggerSubscriptions(actionSubscriptions, {\n                args,\n                name: wrappedAction[ACTION_NAME],\n                store,\n                after,\n                onError,\n            });\n            let ret;\n            try {\n                ret = fn.apply(this && this.$id === $id ? this : store, args);\n                // handle sync errors\n            }\n            catch (error) {\n                triggerSubscriptions(onErrorCallbackList, error);\n                throw error;\n            }\n            if (ret instanceof Promise) {\n                return ret\n                    .then((value) => {\n                    triggerSubscriptions(afterCallbackList, value);\n                    return value;\n                })\n                    .catch((error) => {\n                    triggerSubscriptions(onErrorCallbackList, error);\n                    return Promise.reject(error);\n                });\n            }\n            // trigger after callbacks\n            triggerSubscriptions(afterCallbackList, ret);\n            return ret;\n        };\n        wrappedAction[ACTION_MARKER] = true;\n        wrappedAction[ACTION_NAME] = name; // will be set later\n        // @ts-expect-error: we are intentionally limiting the returned type to just Fn\n        // because all the added properties are internals that are exposed through `$onAction()` only\n        return wrappedAction;\n    };\n    const _hmrPayload = /*#__PURE__*/ markRaw({\n        actions: {},\n        getters: {},\n        state: [],\n        hotState,\n    });\n    const partialStore = {\n        _p: pinia,\n        // _s: scope,\n        $id,\n        $onAction: addSubscription.bind(null, actionSubscriptions),\n        $patch,\n        $reset,\n        $subscribe(callback, options = {}) {\n            const removeSubscription = addSubscription(subscriptions, callback, options.detached, () => stopWatcher());\n            const stopWatcher = scope.run(() => watch(() => pinia.state.value[$id], (state) => {\n                if (options.flush === 'sync' ? isSyncListening : isListening) {\n                    callback({\n                        storeId: $id,\n                        type: MutationType.direct,\n                        events: debuggerEvents,\n                    }, state);\n                }\n            }, assign({}, $subscribeOptions, options)));\n            return removeSubscription;\n        },\n        $dispose,\n    };\n    /* istanbul ignore if */\n    if (isVue2) {\n        // start as non ready\n        partialStore._r = false;\n    }\n    const store = reactive((process.env.NODE_ENV !== 'production') || ((((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test')) && IS_CLIENT)\n        ? assign({\n            _hmrPayload,\n            _customProperties: markRaw(new Set()), // devtools custom properties\n        }, partialStore\n        // must be added later\n        // setupStore\n        )\n        : partialStore);\n    // store the partial store now so the setup of stores can instantiate each other before they are finished without\n    // creating infinite loops.\n    pinia._s.set($id, store);\n    const runWithContext = (pinia._a && pinia._a.runWithContext) || fallbackRunWithContext;\n    // TODO: idea create skipSerialize that marks properties as non serializable and they are skipped\n    const setupStore = runWithContext(() => pinia._e.run(() => (scope = effectScope()).run(() => setup({ action }))));\n    // overwrite existing actions to support $onAction\n    for (const key in setupStore) {\n        const prop = setupStore[key];\n        if ((isRef(prop) && !isComputed(prop)) || isReactive(prop)) {\n            // mark it as a piece of state to be serialized\n            if ((process.env.NODE_ENV !== 'production') && hot) {\n                set(hotState.value, key, toRef(setupStore, key));\n                // createOptionStore directly sets the state in pinia.state.value so we\n                // can just skip that\n            }\n            else if (!isOptionsStore) {\n                // in setup stores we must hydrate the state and sync pinia state tree with the refs the user just created\n                if (initialState && shouldHydrate(prop)) {\n                    if (isRef(prop)) {\n                        prop.value = initialState[key];\n                    }\n                    else {\n                        // probably a reactive object, lets recursively assign\n                        // @ts-expect-error: prop is unknown\n                        mergeReactiveObjects(prop, initialState[key]);\n                    }\n                }\n                // transfer the ref to the pinia state to keep everything in sync\n                /* istanbul ignore if */\n                if (isVue2) {\n                    set(pinia.state.value[$id], key, prop);\n                }\n                else {\n                    pinia.state.value[$id][key] = prop;\n                }\n            }\n            /* istanbul ignore else */\n            if ((process.env.NODE_ENV !== 'production')) {\n                _hmrPayload.state.push(key);\n            }\n            // action\n        }\n        else if (typeof prop === 'function') {\n            const actionValue = (process.env.NODE_ENV !== 'production') && hot ? prop : action(prop, key);\n            // this a hot module replacement store because the hotUpdate method needs\n            // to do it with the right context\n            /* istanbul ignore if */\n            if (isVue2) {\n                set(setupStore, key, actionValue);\n            }\n            else {\n                // @ts-expect-error\n                setupStore[key] = actionValue;\n            }\n            /* istanbul ignore else */\n            if ((process.env.NODE_ENV !== 'production')) {\n                _hmrPayload.actions[key] = prop;\n            }\n            // list actions so they can be used in plugins\n            // @ts-expect-error\n            optionsForPlugin.actions[key] = prop;\n        }\n        else if ((process.env.NODE_ENV !== 'production')) {\n            // add getters for devtools\n            if (isComputed(prop)) {\n                _hmrPayload.getters[key] = isOptionsStore\n                    ? // @ts-expect-error\n                        options.getters[key]\n                    : prop;\n                if (IS_CLIENT) {\n                    const getters = setupStore._getters ||\n                        // @ts-expect-error: same\n                        (setupStore._getters = markRaw([]));\n                    getters.push(key);\n                }\n            }\n        }\n    }\n    // add the state, getters, and action properties\n    /* istanbul ignore if */\n    if (isVue2) {\n        Object.keys(setupStore).forEach((key) => {\n            set(store, key, setupStore[key]);\n        });\n    }\n    else {\n        assign(store, setupStore);\n        // allows retrieving reactive objects with `storeToRefs()`. Must be called after assigning to the reactive object.\n        // Make `storeToRefs()` work with `reactive()` #799\n        assign(toRaw(store), setupStore);\n    }\n    // use this instead of a computed with setter to be able to create it anywhere\n    // without linking the computed lifespan to wherever the store is first\n    // created.\n    Object.defineProperty(store, '$state', {\n        get: () => ((process.env.NODE_ENV !== 'production') && hot ? hotState.value : pinia.state.value[$id]),\n        set: (state) => {\n            /* istanbul ignore if */\n            if ((process.env.NODE_ENV !== 'production') && hot) {\n                throw new Error('cannot set hotState');\n            }\n            $patch(($state) => {\n                // @ts-expect-error: FIXME: shouldn't error?\n                assign($state, state);\n            });\n        },\n    });\n    // add the hotUpdate before plugins to allow them to override it\n    /* istanbul ignore else */\n    if ((process.env.NODE_ENV !== 'production')) {\n        store._hotUpdate = markRaw((newStore) => {\n            store._hotUpdating = true;\n            newStore._hmrPayload.state.forEach((stateKey) => {\n                if (stateKey in store.$state) {\n                    const newStateTarget = newStore.$state[stateKey];\n                    const oldStateSource = store.$state[stateKey];\n                    if (typeof newStateTarget === 'object' &&\n                        isPlainObject(newStateTarget) &&\n                        isPlainObject(oldStateSource)) {\n                        patchObject(newStateTarget, oldStateSource);\n                    }\n                    else {\n                        // transfer the ref\n                        newStore.$state[stateKey] = oldStateSource;\n                    }\n                }\n                // patch direct access properties to allow store.stateProperty to work as\n                // store.$state.stateProperty\n                set(store, stateKey, toRef(newStore.$state, stateKey));\n            });\n            // remove deleted state properties\n            Object.keys(store.$state).forEach((stateKey) => {\n                if (!(stateKey in newStore.$state)) {\n                    del(store, stateKey);\n                }\n            });\n            // avoid devtools logging this as a mutation\n            isListening = false;\n            isSyncListening = false;\n            pinia.state.value[$id] = toRef(newStore._hmrPayload, 'hotState');\n            isSyncListening = true;\n            nextTick().then(() => {\n                isListening = true;\n            });\n            for (const actionName in newStore._hmrPayload.actions) {\n                const actionFn = newStore[actionName];\n                set(store, actionName, action(actionFn, actionName));\n            }\n            // TODO: does this work in both setup and option store?\n            for (const getterName in newStore._hmrPayload.getters) {\n                const getter = newStore._hmrPayload.getters[getterName];\n                const getterValue = isOptionsStore\n                    ? // special handling of options api\n                        computed(() => {\n                            setActivePinia(pinia);\n                            return getter.call(store, store);\n                        })\n                    : getter;\n                set(store, getterName, getterValue);\n            }\n            // remove deleted getters\n            Object.keys(store._hmrPayload.getters).forEach((key) => {\n                if (!(key in newStore._hmrPayload.getters)) {\n                    del(store, key);\n                }\n            });\n            // remove old actions\n            Object.keys(store._hmrPayload.actions).forEach((key) => {\n                if (!(key in newStore._hmrPayload.actions)) {\n                    del(store, key);\n                }\n            });\n            // update the values used in devtools and to allow deleting new properties later on\n            store._hmrPayload = newStore._hmrPayload;\n            store._getters = newStore._getters;\n            store._hotUpdating = false;\n        });\n    }\n    if ((((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test')) && IS_CLIENT) {\n        const nonEnumerable = {\n            writable: true,\n            configurable: true,\n            // avoid warning on devtools trying to display this property\n            enumerable: false,\n        };\n        ['_p', '_hmrPayload', '_getters', '_customProperties'].forEach((p) => {\n            Object.defineProperty(store, p, assign({ value: store[p] }, nonEnumerable));\n        });\n    }\n    /* istanbul ignore if */\n    if (isVue2) {\n        // mark the store as ready before plugins\n        store._r = true;\n    }\n    // apply all plugins\n    pinia._p.forEach((extender) => {\n        /* istanbul ignore else */\n        if ((((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test')) && IS_CLIENT) {\n            const extensions = scope.run(() => extender({\n                store: store,\n                app: pinia._a,\n                pinia,\n                options: optionsForPlugin,\n            }));\n            Object.keys(extensions || {}).forEach((key) => store._customProperties.add(key));\n            assign(store, extensions);\n        }\n        else {\n            assign(store, scope.run(() => extender({\n                store: store,\n                app: pinia._a,\n                pinia,\n                options: optionsForPlugin,\n            })));\n        }\n    });\n    if ((process.env.NODE_ENV !== 'production') &&\n        store.$state &&\n        typeof store.$state === 'object' &&\n        typeof store.$state.constructor === 'function' &&\n        !store.$state.constructor.toString().includes('[native code]')) {\n        console.warn(`[🍍]: The \"state\" must be a plain object. It cannot be\\n` +\n            `\\tstate: () => new MyClass()\\n` +\n            `Found in store \"${store.$id}\".`);\n    }\n    // only apply hydrate to option stores with an initial state in pinia\n    if (initialState &&\n        isOptionsStore &&\n        options.hydrate) {\n        options.hydrate(store.$state, initialState);\n    }\n    isListening = true;\n    isSyncListening = true;\n    return store;\n}\n// allows unused stores to be tree shaken\n/*! #__NO_SIDE_EFFECTS__ */\nfunction defineStore(\n// TODO: add proper types from above\nidOrOptions, setup, setupOptions) {\n    let id;\n    let options;\n    const isSetupStore = typeof setup === 'function';\n    if (typeof idOrOptions === 'string') {\n        id = idOrOptions;\n        // the option store setup will contain the actual options in this case\n        options = isSetupStore ? setupOptions : setup;\n    }\n    else {\n        options = idOrOptions;\n        id = idOrOptions.id;\n        if ((process.env.NODE_ENV !== 'production') && typeof id !== 'string') {\n            throw new Error(`[🍍]: \"defineStore()\" must be passed a store id as its first argument.`);\n        }\n    }\n    function useStore(pinia, hot) {\n        const hasContext = hasInjectionContext();\n        pinia =\n            // in test mode, ignore the argument provided as we can always retrieve a\n            // pinia instance with getActivePinia()\n            ((process.env.NODE_ENV === 'test') && activePinia && activePinia._testing ? null : pinia) ||\n                (hasContext ? inject(piniaSymbol, null) : null);\n        if (pinia)\n            setActivePinia(pinia);\n        if ((process.env.NODE_ENV !== 'production') && !activePinia) {\n            throw new Error(`[🍍]: \"getActivePinia()\" was called but there was no active Pinia. Are you trying to use a store before calling \"app.use(pinia)\"?\\n` +\n                `See https://pinia.vuejs.org/core-concepts/outside-component-usage.html for help.\\n` +\n                `This will fail in production.`);\n        }\n        pinia = activePinia;\n        if (!pinia._s.has(id)) {\n            // creating the store registers it in `pinia._s`\n            if (isSetupStore) {\n                createSetupStore(id, setup, options, pinia);\n            }\n            else {\n                createOptionsStore(id, options, pinia);\n            }\n            /* istanbul ignore else */\n            if ((process.env.NODE_ENV !== 'production')) {\n                // @ts-expect-error: not the right inferred type\n                useStore._pinia = pinia;\n            }\n        }\n        const store = pinia._s.get(id);\n        if ((process.env.NODE_ENV !== 'production') && hot) {\n            const hotId = '__hot:' + id;\n            const newStore = isSetupStore\n                ? createSetupStore(hotId, setup, options, pinia, true)\n                : createOptionsStore(hotId, assign({}, options), pinia, true);\n            hot._hotUpdate(newStore);\n            // cleanup the state properties and the store from the cache\n            delete pinia.state.value[hotId];\n            pinia._s.delete(hotId);\n        }\n        if ((process.env.NODE_ENV !== 'production') && IS_CLIENT) {\n            const currentInstance = getCurrentInstance();\n            // save stores in instances to access them devtools\n            if (currentInstance &&\n                currentInstance.proxy &&\n                // avoid adding stores that are just built for hot module replacement\n                !hot) {\n                const vm = currentInstance.proxy;\n                const cache = '_pStores' in vm ? vm._pStores : (vm._pStores = {});\n                cache[id] = store;\n            }\n        }\n        // StoreGeneric cannot be casted towards Store\n        return store;\n    }\n    useStore.$id = id;\n    return useStore;\n}\n\nlet mapStoreSuffix = 'Store';\n/**\n * Changes the suffix added by `mapStores()`. Can be set to an empty string.\n * Defaults to `\"Store\"`. Make sure to extend the MapStoresCustomization\n * interface if you are using TypeScript.\n *\n * @param suffix - new suffix\n */\nfunction setMapStoreSuffix(suffix // could be 'Store' but that would be annoying for JS\n) {\n    mapStoreSuffix = suffix;\n}\n/**\n * Allows using stores without the composition API (`setup()`) by generating an\n * object to be spread in the `computed` field of a component. It accepts a list\n * of store definitions.\n *\n * @example\n * ```js\n * export default {\n *   computed: {\n *     // other computed properties\n *     ...mapStores(useUserStore, useCartStore)\n *   },\n *\n *   created() {\n *     this.userStore // store with id \"user\"\n *     this.cartStore // store with id \"cart\"\n *   }\n * }\n * ```\n *\n * @param stores - list of stores to map to an object\n */\nfunction mapStores(...stores) {\n    if ((process.env.NODE_ENV !== 'production') && Array.isArray(stores[0])) {\n        console.warn(`[🍍]: Directly pass all stores to \"mapStores()\" without putting them in an array:\\n` +\n            `Replace\\n` +\n            `\\tmapStores([useAuthStore, useCartStore])\\n` +\n            `with\\n` +\n            `\\tmapStores(useAuthStore, useCartStore)\\n` +\n            `This will fail in production if not fixed.`);\n        stores = stores[0];\n    }\n    return stores.reduce((reduced, useStore) => {\n        // @ts-expect-error: $id is added by defineStore\n        reduced[useStore.$id + mapStoreSuffix] = function () {\n            return useStore(this.$pinia);\n        };\n        return reduced;\n    }, {});\n}\n/**\n * Allows using state and getters from one store without using the composition\n * API (`setup()`) by generating an object to be spread in the `computed` field\n * of a component.\n *\n * @param useStore - store to map from\n * @param keysOrMapper - array or object\n */\nfunction mapState(useStore, keysOrMapper) {\n    return Array.isArray(keysOrMapper)\n        ? keysOrMapper.reduce((reduced, key) => {\n            reduced[key] = function () {\n                // @ts-expect-error: FIXME: should work?\n                return useStore(this.$pinia)[key];\n            };\n            return reduced;\n        }, {})\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\n            // @ts-expect-error\n            reduced[key] = function () {\n                const store = useStore(this.$pinia);\n                const storeKey = keysOrMapper[key];\n                // for some reason TS is unable to infer the type of storeKey to be a\n                // function\n                return typeof storeKey === 'function'\n                    ? storeKey.call(this, store)\n                    : // @ts-expect-error: FIXME: should work?\n                        store[storeKey];\n            };\n            return reduced;\n        }, {});\n}\n/**\n * Alias for `mapState()`. You should use `mapState()` instead.\n * @deprecated use `mapState()` instead.\n */\nconst mapGetters = mapState;\n/**\n * Allows directly using actions from your store without using the composition\n * API (`setup()`) by generating an object to be spread in the `methods` field\n * of a component.\n *\n * @param useStore - store to map from\n * @param keysOrMapper - array or object\n */\nfunction mapActions(useStore, keysOrMapper) {\n    return Array.isArray(keysOrMapper)\n        ? keysOrMapper.reduce((reduced, key) => {\n            // @ts-expect-error\n            reduced[key] = function (...args) {\n                // @ts-expect-error: FIXME: should work?\n                return useStore(this.$pinia)[key](...args);\n            };\n            return reduced;\n        }, {})\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\n            // @ts-expect-error\n            reduced[key] = function (...args) {\n                // @ts-expect-error: FIXME: should work?\n                return useStore(this.$pinia)[keysOrMapper[key]](...args);\n            };\n            return reduced;\n        }, {});\n}\n/**\n * Allows using state and getters from one store without using the composition\n * API (`setup()`) by generating an object to be spread in the `computed` field\n * of a component.\n *\n * @param useStore - store to map from\n * @param keysOrMapper - array or object\n */\nfunction mapWritableState(useStore, keysOrMapper) {\n    return Array.isArray(keysOrMapper)\n        ? keysOrMapper.reduce((reduced, key) => {\n            reduced[key] = {\n                get() {\n                    return useStore(this.$pinia)[key];\n                },\n                set(value) {\n                    return (useStore(this.$pinia)[key] = value);\n                },\n            };\n            return reduced;\n        }, {})\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\n            reduced[key] = {\n                get() {\n                    return useStore(this.$pinia)[keysOrMapper[key]];\n                },\n                set(value) {\n                    return (useStore(this.$pinia)[keysOrMapper[key]] = value);\n                },\n            };\n            return reduced;\n        }, {});\n}\n\n/**\n * Creates an object of references with all the state, getters, and plugin-added\n * state properties of the store. Similar to `toRefs()` but specifically\n * designed for Pinia stores so methods and non reactive properties are\n * completely ignored.\n *\n * @param store - store to extract the refs from\n */\nfunction storeToRefs(store) {\n    // See https://github.com/vuejs/pinia/issues/852\n    // It's easier to just use toRefs() even if it includes more stuff\n    if (isVue2) {\n        // @ts-expect-error: toRefs include methods and others\n        return toRefs(store);\n    }\n    else {\n        const rawStore = toRaw(store);\n        const refs = {};\n        for (const key in rawStore) {\n            const value = rawStore[key];\n            // There is no native method to check for a computed\n            // https://github.com/vuejs/core/pull/4165\n            if (value.effect) {\n                // @ts-expect-error: too hard to type correctly\n                refs[key] =\n                    // ...\n                    computed({\n                        get: () => store[key],\n                        set(value) {\n                            store[key] = value;\n                        },\n                    });\n            }\n            else if (isRef(value) || isReactive(value)) {\n                // @ts-expect-error: the key is state or getter\n                refs[key] =\n                    // ---\n                    toRef(store, key);\n            }\n        }\n        return refs;\n    }\n}\n\n/**\n * Vue 2 Plugin that must be installed for pinia to work. Note **you don't need\n * this plugin if you are using Nuxt.js**. Use the `buildModule` instead:\n * https://pinia.vuejs.org/ssr/nuxt.html.\n *\n * @example\n * ```js\n * import Vue from 'vue'\n * import { PiniaVuePlugin, createPinia } from 'pinia'\n *\n * Vue.use(PiniaVuePlugin)\n * const pinia = createPinia()\n *\n * new Vue({\n *   el: '#app',\n *   // ...\n *   pinia,\n * })\n * ```\n *\n * @param _Vue - `Vue` imported from 'vue'.\n */\nconst PiniaVuePlugin = function (_Vue) {\n    // Equivalent of\n    // app.config.globalProperties.$pinia = pinia\n    _Vue.mixin({\n        beforeCreate() {\n            const options = this.$options;\n            if (options.pinia) {\n                const pinia = options.pinia;\n                // HACK: taken from provide(): https://github.com/vuejs/composition-api/blob/main/src/apis/inject.ts#L31\n                /* istanbul ignore else */\n                if (!this._provided) {\n                    const provideCache = {};\n                    Object.defineProperty(this, '_provided', {\n                        get: () => provideCache,\n                        set: (v) => Object.assign(provideCache, v),\n                    });\n                }\n                this._provided[piniaSymbol] = pinia;\n                // propagate the pinia instance in an SSR friendly way\n                // avoid adding it to nuxt twice\n                /* istanbul ignore else */\n                if (!this.$pinia) {\n                    this.$pinia = pinia;\n                }\n                pinia._a = this;\n                if (IS_CLIENT) {\n                    // this allows calling useStore() outside of a component setup after\n                    // installing pinia's plugin\n                    setActivePinia(pinia);\n                }\n                if ((((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test')) && IS_CLIENT) {\n                    registerPiniaDevtools(pinia._a, pinia);\n                }\n            }\n            else if (!this.$pinia && options.parent && options.parent.$pinia) {\n                this.$pinia = options.parent.$pinia;\n            }\n        },\n        destroyed() {\n            delete this._pStores;\n        },\n    });\n};\n\nexport { MutationType, PiniaVuePlugin, acceptHMRUpdate, createPinia, defineStore, disposePinia, getActivePinia, mapActions, mapGetters, mapState, mapStores, mapWritableState, setActivePinia, setMapStoreSuffix, shouldHydrate, skipHydrate, storeToRefs };\n","<template>\n  <div>\n    <!-- Chat bubble -->\n    <div \n      class=\"fixed bottom-6 right-6 w-14 h-14 rounded-full flex items-center justify-center cursor-pointer shadow-lg transition-all z-50\"\n      :style=\"{ backgroundColor: primaryColor }\"\n      @click=\"toggleChat\"\n    >\n      <i class=\"pi pi-comments text-white\" v-if=\"!isOpen\"></i>\n      <i class=\"pi pi-times text-white\" v-else></i>\n    </div>\n\n    <!-- Chat interface -->\n    <div \n      v-if=\"isOpen\" \n      class=\"fixed bottom-24 right-6 w-80 h-96 bg-white rounded-lg shadow-xl flex flex-col overflow-hidden border border-gray-200 z-40\"\n    >\n      <!-- Chat header -->\n      <div :style=\"{ backgroundColor: primaryColor }\" class=\"text-white p-4 flex justify-between items-center\">\n        <h3 class=\"font-medium\">{{ brandName }}</h3>\n        <i class=\"pi pi-times cursor-pointer\" @click=\"toggleChat\"></i>\n      </div>\n      \n      <!-- Chat messages -->\n      <div class=\"flex-1 p-4 overflow-y-auto bg-gray-50\">\n        <div v-if=\"messages.length === 0\" class=\"text-center text-gray-500 mt-20\">\n          {{ welcomeMessage }}\n        </div>\n        <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"mb-3\">\n          <div \n            :class=\"[\n              'max-w-[80%] p-3 rounded-lg', \n              message.isUser ? 'text-white ml-auto rounded-br-none' : 'bg-gray-200 text-gray-800 rounded-bl-none'\n            ]\"\n            :style=\"message.isUser ? { backgroundColor: primaryColor } : {}\"\n          >\n            {{ message.text }}\n          </div>\n        </div>\n      </div>\n      \n      <!-- Chat input -->\n      <div class=\"p-3 border-t border-gray-200 bg-white\">\n        <div class=\"flex items-center\">\n          <input \n            v-model=\"newMessage\" \n            type=\"text\" \n            placeholder=\"Type a message...\" \n            class=\"flex-1 border border-gray-300 rounded-full px-4 py-2 focus:outline-none focus:ring-2\"\n            :style=\"{ '--tw-ring-color': primaryColor }\"\n            @keyup.enter=\"sendMessage\"\n          />\n          <button \n            @click=\"sendMessage\" \n            class=\"ml-2 text-white rounded-full p-2 focus:outline-none\"\n            :style=\"{ backgroundColor: primaryColor }\"\n          >\n            <i class=\"pi pi-send\"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue';\n\n// Props del componente\nconst props = defineProps({\n  primaryColor: {\n    type: String,\n    default: '#6200ea'\n  },\n  brandName: {\n    type: String,\n    default: 'Chat Support'\n  },\n  position: {\n    type: String,\n    default: 'bottom-right'\n  },\n  welcomeMessage: {\n    type: String,\n    default: 'Send a message to start chatting'\n  }\n});\n\nconst isOpen = ref(false);\nconst messages = ref<Array<{text: string, isUser: boolean}>>([]);\nconst newMessage = ref('');\n\n// Escuchar eventos personalizados para abrir/cerrar el chat desde el exterior\nonMounted(() => {\n  const container = document.getElementById('growdesk-widget-container');\n  if (container) {\n    container.addEventListener('open-widget', () => {\n      isOpen.value = true;\n    });\n    container.addEventListener('close-widget', () => {\n      isOpen.value = false;\n    });\n  }\n});\n\nconst toggleChat = () => {\n  isOpen.value = !isOpen.value;\n  \n  // Add welcome message if opening chat for the first time\n  if (isOpen.value && messages.value.length === 0) {\n    messages.value.push({\n      text: props.welcomeMessage,\n      isUser: false\n    });\n  }\n};\n\nconst sendMessage = () => {\n  if (newMessage.value.trim() === '') return;\n  \n  // Add user message\n  messages.value.push({\n    text: newMessage.value,\n    isUser: true\n  });\n  \n  const userMessage = newMessage.value;\n  newMessage.value = '';\n  \n  // Simulate response after a short delay\n  setTimeout(() => {\n    messages.value.push({\n      text: `Gracias por tu mensaje: \"${userMessage}\". Nuestro equipo se pondrá en contacto contigo pronto.`,\n      isUser: false\n    });\n  }, 1000);\n};\n</script>\n\n<style>\n/* Los estilos se manejan con Tailwind CSS */\n@import 'tailwindcss/base';\n@import 'tailwindcss/components';\n@import 'tailwindcss/utilities';\n\n.pi {\n  font-size: 1.25rem;\n}\n</style> ","import axios from 'axios';\n\n// Definir los tipos de datos para nuestras peticiones y respuestas\nexport interface TicketCreationData {\n  name: string;\n  email: string;\n  message: string;\n  metadata: {\n    url: string;\n    referrer: string;\n    userAgent: string;\n    screenSize: string;\n  };\n}\n\nexport interface TicketCreationResponse {\n  success: boolean;\n  ticketId: string;\n  liveChatAvailable: boolean;\n}\n\nexport interface MessageData {\n  ticketId: string;\n  message: string;\n}\n\nexport interface MessageResponse {\n  success: boolean;\n  messageId: string;\n  timestamp: string;\n}\n\nexport interface WidgetConfig {\n  apiUrl: string;\n  widgetId: string;\n  widgetToken: string;\n}\n\n// Crear una instancia personalizada de la API\nconst createApiClient = (config: WidgetConfig) => {\n  console.log('Creando cliente API con configuración:', { \n    baseURL: config.apiUrl,\n    widgetId: config.widgetId,\n    hasToken: !!config.widgetToken \n  });\n  \n  const apiClient = axios.create({\n    baseURL: config.apiUrl,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Widget-ID': config.widgetId,\n      'X-Widget-Token': config.widgetToken\n    },\n    timeout: 10000, // Aumentar timeout a 10 segundos\n    withCredentials: false // Asegurarnos que no se envían credenciales cross-domain\n  });\n\n  // Agregar interceptores para manejo de errores\n  apiClient.interceptors.request.use(\n    config => {\n      console.log(`Enviando solicitud a ${config.url}`, config);\n      return config;\n    },\n    error => {\n      console.error('Error en la solicitud:', error);\n      return Promise.reject(error);\n    }\n  );\n\n  apiClient.interceptors.response.use(\n    response => {\n      console.log(`Respuesta recibida de ${response.config.url}:`, response.status, response.data);\n      return response;\n    },\n    error => {\n      console.error('Error en la comunicación con la API del widget:', error.message, error.response?.status, error.response?.data);\n      return Promise.reject(error);\n    }\n  );\n\n  return apiClient;\n};\n\n// Variable para almacenar la configuración actual\nlet currentConfig: WidgetConfig = {\n  apiUrl: 'https://api.growdesk.com/widget',\n  widgetId: '',\n  widgetToken: ''\n};\n\n// Función para inicializar o actualizar la configuración\nexport const configureWidgetApi = (config: Partial<WidgetConfig>) => {\n  currentConfig = { ...currentConfig, ...config };\n  return currentConfig;\n};\n\n// Hook para usar la API del widget\nexport const useWidgetApi = () => {\n  const apiClient = createApiClient(currentConfig);\n\n  // Crear un nuevo ticket\n  const createTicket = async (data: TicketCreationData): Promise<TicketCreationResponse> => {\n    try {\n      const response = await apiClient.post('/widget/tickets', data);\n      return response.data;\n    } catch (error) {\n      console.error('Error al crear el ticket:', error);\n      throw new Error('No pudimos crear tu ticket. Por favor, inténtalo de nuevo más tarde.');\n    }\n  };\n\n  // Enviar un mensaje en una conversación existente\n  const sendMessage = async (data: MessageData): Promise<MessageResponse> => {\n    try {\n      const response = await apiClient.post('/widget/messages', data);\n      return response.data;\n    } catch (error) {\n      console.error('Error al enviar el mensaje:', error);\n      throw new Error('No pudimos enviar tu mensaje. Por favor, inténtalo de nuevo más tarde.');\n    }\n  };\n\n  // Obtener el historial de mensajes de un ticket\n  const getMessageHistory = async (ticketId: string) => {\n    try {\n      const response = await apiClient.get(`/widget/tickets/${ticketId}/messages`);\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener el historial de mensajes:', error);\n      throw new Error('No pudimos cargar tus mensajes anteriores.');\n    }\n  };\n\n  // Subir un archivo adjunto\n  const uploadAttachment = async (ticketId: string, file: File) => {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('ticketId', ticketId);\n      \n      const response = await apiClient.post('/attachments', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error al subir el archivo:', error);\n      throw new Error('No pudimos subir tu archivo. Por favor, inténtalo de nuevo.');\n    }\n  };\n\n  // Verificar el estado del servidor\n  const checkServerStatus = async () => {\n    try {\n      const response = await apiClient.get('/widget/status');\n      return response.data.online;\n    } catch (error) {\n      console.error('Error al verificar el estado del servidor:', error);\n      return false;\n    }\n  };\n\n  return {\n    createTicket,\n    sendMessage,\n    getMessageHistory,\n    uploadAttachment,\n    checkServerStatus\n  };\n};\n\n// Exportar una función para inicializar la API con valores obtenidos del script de carga\nexport const initializeFromScript = () => {\n  console.log('Initializing widget API from script');\n  \n  // Obtener el script actual\n  const scriptTag = document.querySelector('script[src*=\"widget.js\"]') || \n                   document.getElementById('growdesk-widget') ||\n                   document.currentScript as HTMLScriptElement;\n  \n  if (scriptTag) {\n    console.log('Found widget script tag', scriptTag);\n    \n    const widgetId = scriptTag.getAttribute('data-widget-id');\n    const apiUrl = scriptTag.getAttribute('data-api-url');\n    const widgetToken = scriptTag.getAttribute('data-widget-token');\n    \n    console.log('Widget initialization parameters:', { widgetId, apiUrl, widgetToken: widgetToken ? '***' : null });\n    \n    if (widgetId) {\n      const config: Partial<WidgetConfig> = { widgetId };\n      \n      if (apiUrl) config.apiUrl = apiUrl;\n      if (widgetToken) config.widgetToken = widgetToken;\n      \n      const finalConfig = configureWidgetApi(config);\n      console.log('Widget API configured successfully', { \n        apiUrl: finalConfig.apiUrl,\n        widgetId: finalConfig.widgetId,\n        hasToken: !!finalConfig.widgetToken \n      });\n    } else {\n      console.error('GrowDesk Widget: No se proporcionó un ID de widget');\n    }\n  } else {\n    console.error('GrowDesk Widget: No se pudo encontrar el script del widget');\n  }\n}; ","import { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport ChatWidget from './components/ChatWidget.vue';\nimport { initializeFromScript, configureWidgetApi } from './api/widgetApi';\nimport 'primeicons/primeicons.css';\nimport './styles.css';\n\nconsole.log('GrowDesk Widget - Iniciando...');\n\n// Crear un contenedor para el widget\nconst createWidgetContainer = (): HTMLElement => {\n  console.log('Creando contenedor para el widget');\n  const container = document.createElement('div');\n  container.id = 'growdesk-widget-container';\n  document.body.appendChild(container);\n  return container;\n};\n\n// Inicializar el widget\nconst initializeWidget = () => {\n  console.log('Inicializando widget');\n  \n  // Obtener configuración del script\n  initializeFromScript();\n\n  // Crear el store global\n  const pinia = createPinia();\n\n  // Crear contenedor y montar la aplicación Vue\n  const container = createWidgetContainer();\n  const app = createApp(ChatWidget, {\n    // Propiedades que se pueden personalizar\n    brandName: window.GrowDeskConfig?.brandName || 'GrowDesk',\n    welcomeMessage: window.GrowDeskConfig?.welcomeMessage || '¿Necesitas ayuda? Estamos aquí para ayudarte.',\n    primaryColor: window.GrowDeskConfig?.primaryColor || '#1976d2',\n    position: window.GrowDeskConfig?.position || 'bottom-right',\n    logoUrl: window.GrowDeskConfig?.logoUrl || ''\n  });\n\n  // Usar Pinia\n  app.use(pinia);\n\n  // Montar la aplicación\n  app.mount(container);\n  \n  console.log('Widget montado correctamente');\n\n  // Crear y retornar una API pública para interactuar con el widget\n  const widgetApi = {\n    open: () => {\n      console.log('Abriendo widget vía API');\n      const widgetComponent = document.querySelector('#growdesk-widget-container');\n      if (widgetComponent) {\n        const event = new CustomEvent('open-widget');\n        widgetComponent.dispatchEvent(event);\n      }\n    },\n    close: () => {\n      console.log('Cerrando widget vía API');\n      const widgetComponent = document.querySelector('#growdesk-widget-container');\n      if (widgetComponent) {\n        const event = new CustomEvent('close-widget');\n        widgetComponent.dispatchEvent(event);\n      }\n    },\n    configure: (config: any) => {\n      console.log('Reconfigurando widget', config);\n      // Actualizar configuración de la API\n      if (config.apiUrl || config.widgetId || config.widgetToken) {\n        configureWidgetApi({\n          apiUrl: config.apiUrl,\n          widgetId: config.widgetId,\n          widgetToken: config.widgetToken\n        });\n      }\n\n      // Actualizar configuración de la UI\n      window.GrowDeskConfig = {\n        ...window.GrowDeskConfig,\n        ...config\n      };\n    }\n  };\n  \n  console.log('API del widget creada', widgetApi);\n  return widgetApi;\n};\n\n// Interfaz para la configuración global del widget\ndeclare global {\n  interface Window {\n    GrowDeskConfig?: {\n      brandName?: string;\n      welcomeMessage?: string;\n      primaryColor?: string;\n      position?: string;\n      logoUrl?: string;\n    };\n    GrowDeskWidget?: any;\n  }\n}\n\n// Auto-inicializar cuando el script se carga\nlet widgetInitialized = false;\n\nconst initialize = () => {\n  if (widgetInitialized) return;\n  \n  console.log('Inicializando GrowDeskWidget automáticamente');\n  const api = initializeWidget();\n  window.GrowDeskWidget = api;\n  widgetInitialized = true;\n};\n\n// Inicializar cuando el DOM esté listo\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initialize);\n} else {\n  initialize();\n}\n\n// Exponer la función de inicialización para uso manual\nexport default initializeWidget; "],"names":["MutationType","open","state","store","toRaw","now","watch","unref","markRaw","effectScope","ref","onMounted","createApp","ChatWidget"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}